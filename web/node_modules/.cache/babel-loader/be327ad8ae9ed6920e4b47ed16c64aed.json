{"ast":null,"code":"import Vue from 'vue';\nimport App from './App.vue';\nimport VueRouter from 'vue-router';\nimport { BootstrapVue } from 'bootstrap-vue';\nimport axios from \"axios\";\nimport VueI18n from 'vue-i18n';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport translations from './config/translations';\nimport routes from './config/routes.js';\nconsole.log(translations);\nVue.config.productionTip = false;\nVue.use(BootstrapVue);\nVue.use(VueI18n);\nVue.prototype.$axios = axios;\nconst resolvers = [];\nconst router = new VueRouter({\n  routes,\n  mode: 'history'\n});\nVue.filter('uppercase', function (value) {\n  return value.toUpperCase();\n});\nconst i18n = new VueI18n({\n  locale: localStorage.language || 'lv',\n  fallbackLocale: 'eng',\n  messages: translations\n});\n\nfunction hasQueryParams(route) {\n  return !!Object.keys(route.query).length;\n}\n\nrouter.beforeEach((to, from, next) => {\n  if (!hasQueryParams(to) && hasQueryParams(from)) {\n    next({\n      path: to.path,\n      query: from.query\n    });\n  } else {\n    next();\n  }\n});\nconst loadLanguages = axios.post(\"/api/language/list\").then(response => {\n  Vue.prototype.$languages = response.data.content;\n});\nresolvers.push(loadLanguages);\nPromise.all(resolvers).then(() => {\n  new Vue({\n    i18n,\n    router,\n    render: h => h(App)\n  }).$mount('#app');\n});","map":null,"metadata":{},"sourceType":"module"}